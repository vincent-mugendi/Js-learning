Js
==
javascript is a versatile high-level programming language primarily used to create dynamic and interactive content on the web



NOTE:
====
Js is case sensitive
camelCase is typically used
Strings are immutable meaning they cannot be altered once they are created
this means you cannot change characters in astring but you can change the whole string

COMMENTS
=============

// - inline comments
/* This
multiline comment */


DATA TYPES
===============
1. undefined
	hasnt been defined
	like a variable without a value

	e.g 
		let name;

2. null
	nothing

3. boolean
	True or False

4. String
	characters

5. Symbol
	Immutable unique value
	

6. Number
numbers
	floats
	=====
	numbers with decimals (5.6)
	
7. Object
	can store different data types

Finding the type of data
========================
use typeof() function
Example:
	num = 34;
	typeof(num) // is integer


VARIABLES
==========
Use var keyword
Exmple
	var myName = "Vincent"

use let keyword
Example
	let my Name = "Vincent"

use const keyword
Example
	let const pi = 3.14

	Difference between var, let and const
	------------------------------------------------
	var can be used within your whole program
	let can only be used where it is declared
	const once set cannot be changed

ASIGNING VALUES
=================
use the = (asignment) operator
Example
	var a = 9; //Declared a variable a and assigned a value of 9

CALCULATIONS
======================
1. Addition = +
2. Subtraction = -
3. Multiplication = *
4. Division = /
5. Increment = ++
6. Decrement = --
7. Remainder/modulus = %


+= operator, -= operator, *= operator, /= operator
======================================
Example
	instead of:
		a = a + 7;
		a = a - 7;
		a = a * 7;
		a = a / 7;
	use +=:
		a += 7;
		a -= 7;
		a *= 7;
		a /= 7;

ROUNDING numbers
================
use Math.round() function
Example:
	num = 23.67;
	Math.round(num) //will round to 24




DECLARING STRING VARIABLES
==========================
use ""

ESCAPING LITERAL QUOTES IN STRINGS
=================================
This when a string contains quotes
use escape character \
	example:
	var string = "This is a \"double quote\""

you can also use quotes mixture
Example:
	var string = 'This is a "double quote"

You can also use backtick `
Example
	var string = "This is a `"double quote`""

ESCAPE characters
===============
\' - escape single quote
\" - double quotes
\\ - backslash
\n - newline
\r - carriage return
\t - tab
\b - backspace
\f - form feed


CONCATENATING Strings
=====================
Use the + operator
Example:
	var greeting = "Hello";
	var  name = "John";
	var welcome = "Hello" + "John";

You can also use += operator


TEMPLATE STRINGS
================
- instead og " we use ` backtick
- example:
	var string = `This is a template string`

- You can insert values into them (interpolation)

- They have multiline option
- example:
	var string = `This is a
	multiline`


INTERPOLATION
=============

FIND THE LENGTH OF THE String
============================
Use .length property
Example:
	var joke = "Is this a joke";
	console.log(joke.length);


FINDING CHARACTER IN THE String
==============================
use the bracket notation
Example:
	var name = "John";
	console.log(name[0]); //will log J


FINDING THE Nth CHARACTER IN A String
====================================
Use the bracket notation
Example:
	var name = "John";
	//lets say i want to get the 3rd character in the string
	console.log(name[2]);

FINDING THE LAST CHARACTER IN A STRING
======================================
Find the length
Then minus 1 from the length
then use bracket notation
Example:
	var str = "This is a string";
	console.log(str.length);
	console.log(str[value of str.length - 1]);


ARRAYS
=======
Declared like variables with values in square brackets
values can be any data type
Example:
	var shopping = ["Mangoes", 4, "Tissue"];

NESTED ARRAYS
==============
Refers to array within an array
Example:
	var ingredients = [["Flour", "Sugar", "Cinnamon"], ["eggs", "milk", "butter"]];

ACCESSING DATA IN ARRAYS
========================
Use square bracket notation
Example:
	var numbers = [1, 2, 3];
	console.log(numbers[0]) //to get the first element of the array


MODIFYING ARRAYS
===================
Use index to modify arrays

ADDING DATA TO AN ARRAY
=========================

Use push function
=================
Example:
	var colors = ["Red", "Blue", "Orange"];
	//lets add green to the colors
	colors.push("green");

REMOVING THE LAST ELEMENT IN THE ARRAY
======================================
Use the pop function
Example:
	var colors = ["Green", "Red", "Pink"]
	colors.pop(); // Pink is removed


REMOVING THE FIRST ELEMENT OF AN ARRAY
======================================
use the shift function
Example:
	var numbers = [1, 2, 3, 4];
	numbers.shift() //removes 1


ADDING AN ELEMENT AT THE BEGGINNING OF THE ARRAY
================================================
Unshift adds an element to the beginning of an array
Example:
	var pupils = ["John", "Ann", "Paul", "Peter"];
	pupils.unshift("Jane"); // adds jane to the front of the array


.map() METHODS
==============
- Used on arrays, transforms each array element, returns a new array with the modified values

✅ Basic Syntax
================
	array.map(function(element, index, array) {
    	return transformedElement;
	});

- element – The current element in the array.
- index (optional) – The index of the current element.
- array (optional) – The entire array being mapped.
- Returns a new array with transformed elements.




✅ Example: Doubling Numbers in an Array
=========================================

	const numbers = [1, 2, 3, 4, 5];
	const doubled = numbers.map(num => num * 2);

	console.log(doubled); // Output: [2, 4, 6, 8, 10]

✔ Takes each number and multiplies it by 2
✔ Returns a new array with modified values

========================================



++++++++++++++++++++
+++++++++++++++++++++++++++++==


FUNCTIONS
======================
Declared using the keyword function
SYNTAX:
	function functionName(){
		// function code goes here
	}

Example:
	function greeting(){
		console.log("Hello, there!");
	}

	greeting(); // calling the function


FUNCTION PARAMETERS
===========================
Refers to data paased into functions as arguments
Example:
	function Addition(a, b){
		console.log(a + b);
	}

	Addition(2, 3); // 5 is logged out


TYPES OF FUNCTIONS
==================
1. Anonymous functions
----------------------
Have no names
	e.g
	function() {
		return 'Hello'
	}

	- They are ussually assigned to a variable:
	const sayHello = function() {
		return 'Hello'
	}

2. callback functions
---------------------
function paased in another function as a parameter.
	e.g
	setTimeout(function() {
		return 'hi'
	})

3. Named functions
------------------
Are Named
	function sayHi() {
		return 'hi'
	}

4. Object methods
-----------------
functions inside an object
	const person = {
		'name': 'Vincent',
		sayHi: function() { return 'hi'}
	}

5. constructor functions
----------------------
functions used to create objects
Start with Capital letter


GLOBAL Variables
====================
Are variables which are defined outside the functions and those that are defined inside the functions BUT without the var keyword


RETURN STATEMENTS
==================
Are used  to return values from a function
Example:
	function sayHi(){
		return ("Hi!");
	}
	console.log(sayHi()); // will log Hi!

QUEUE
======
	A data structure where items are added in order


USING BOOLEAN
==============
Boolean values are true or False


FALSY VALUES
============
- These are values in javascript that are evaluated as false
- They include:
	- false
	- 0
	- ''
	- undefined (measns dont have a value)
	- NaN (means Not a Number)
	- null

TRUTHY VALUES
=============
- Values that are evalutaed as true
- They include:
	- Any value that is not a falsy value



IF ELSE STATEMENTS
===================
Used to make decisions in code
Example:
	var number = 1;
	if (number < 5){
		console.log("True");
	}
	else {
		console.log("False")
	}


OPERATORS
=============
== :Equals operator
	- converts the values being compared to same data type 1st, then compares fro equality

=== :Strict equals operator
	- compares for equality without converting

!= :Not Equals operator
	- converts 1st

!== :Strict not equals operator
	- compares as is

> :Greator than
< :Less than

>= :Greator than or equal to
<= :Less than or equal to

&& :and operator
|| :OR operator

TERNARY OPERATOR
================
- ?
- acts as a shortened if else statement
- example:
	- this if statement:
		if (true) {
			'truthy'
		} else {
			'falsy'
		}

	- can be shortened to:
		true ? 'truthy' : 'falsy'



ELSE IF STATEMENT
============
Example:
var number = 5;
if (number > 3) {
	console.log("Greator than 3");
} else if (number == 5) {
	console.log("The number is 5");
} else {
	console.log("The number is not greator than 3 and is not equals to 5);
}


SWITCH STATEMENTS
===================
Can be used in place of if statement 



OBJECTS
========
Stores Key-value pair data,
Properties can be any value.
we use . to access property values
use [] brackets to access values of properties with a space in them (eg "my age":)
Example:
	var student = {
		"name": "John",
		"grade": 6,
		"class": "North"
	}

	console.log(student.name); //will log John

UPDATING OBJECT Properties
========================
Use . notation to update
Example:
	var pen = {
		"brand": "speedo",
		"color": "black",
		"price": 20
	}

	pen.brand = "Bic";
	console.log(pen.brand); // will log Bic 


ADDING OBJECT Properties
======================
Use . notation or [] brackets
Example:
	var book = {
		"brand": "Kasuku",
		"lines": "ruled",
		"price": 20
	}

	book.pages = "200";


DELETING OBJECT Properties
========================
Use delete keyword
Example: 
	var pen = {
		"brand": "speedo",
		"color": "black",
		"price": 20
	}

	delete pen.price;

CHECKING OBJECT Properties
=========================
Use hasOwnProperty() method
returns true or False
Example:
	var pen = {
		"brand": "speedo",
		"color": "black",
		"price": 20
	}

	function checkPenProperties(property) {
		if (pen.hasOwnProperty(property)) {
			console.log("Property Present");
		} else {
			console.log("Property Absent");
		}
	};
	
	checkPenProperties("color");

OBJECT METHODS
==============
Are functions in an object:
e.g
	const dog = {
		name: 'Skippy',
		bark() {
			console.log('Woof');
		}
	}



this KEYWORD
============
- is a js keyword
- used to reference an object or a function




onclick attribute
=================
- added at html elements as an attribute, 
- used to define what happens when an element is clicked



LOOPS
=====
- is a structure made of instructions that runs repeatedly as long a certain condition is true
- When you have to perform a task repeatedly until a condition is met, you use a loop.

	LOOPS IN Js
	===========
	1. for loop
	2. while loop
	3. do..while loop
	4. for....in loop
	5. for...of loop

	for loop
	========
	- has:
		- starting point
		- condition
		- increment or Decrement
		- set of instructions

	SYNTAX
	======

	for (initialization; conditio) {
		//set of instructions
	}

	for (let i = 0; i < 5; i++) {
		console.log(i)
	}

	for...in loop
	=============
	- Only used when iterating over an object's key or properties

	SYNTAX
	======
	let object0 = {
		key1: "Value 1",
		key2: "Value 2"
	}

	for (let key in object0) {
		//Printing the key and corresponding property/value
		console.log(key, object0[key]) 
	}



	for... of
	==========
	- used to loop over iterables
	- iterables are items that can be looped over; strings, arrays, sets, maps
	- 

	SYNTAX
	=======
	let array0 = ['item1', 'item2', 'item3'];

	for (const item of array0) {
		console.log(item);
	}




CLASSES
=======
- a blueprint for creating objects
- define object properties and methods
- use class keyword

	SYNTAX
	======
	class Person {
		constructor(name, age) {
			this.name = name;
			this.age = age;
		}

		greet() {
			console.log(`Hi, I'm ${this.name} and I'm ${this.age} years old.`);
		}
	}


	CREATING OBEJCTS FROM CLASSES
	=============================
	const john = new Person("John", 25);
	john.greet();

[3:35] - javascript tutorial full course

